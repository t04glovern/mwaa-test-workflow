name: Test DAGs on MWAA Local Runner

on:
  workflow_call:
    inputs:
      dags_path:
        description: 'Path to the DAGs directory'
        type: string
        required: true
        default: './dags'
      startup_script_path:
        description: 'Path to the startup script'
        type: string
        required: false
        default: ''
      requirements_path:
        description: 'Path to requirements.txt file'
        type: string
        required: false
        default: ''
      plugins_path:
        description: 'Path to the plugins directory'
        type: string
        required: false
        default: ''
      dag_id:
        description: 'DAG ID to test'
        type: string
        required: false
        default: ''
      execution_date:
        description: 'Execution date for testing the DAG (YYYY-MM-DD)'
        type: string
        required: false
        default: ''
      aws_role_to_assume:
        description: 'Name of the AWS role to assume'
        type: string
        required: false
        default: ''
      aws_region:
        description: 'AWS region'
        type: string
        required: false
        default: ''
      aws_role_assume_duration_seconds:
        description: 'Duration in seconds for the assumed role'
        type: string
        required: false
        default: '3600'

jobs:
  airflow-test-dags:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone MWAA Local Runner
        run: |
          git clone https://github.com/aws/aws-mwaa-local-runner.git
          cd aws-mwaa-local-runner
          git checkout v2.10.1
        shell: bash

      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
        shell: bash

      - name: Copy DAGs
        run: |
          cp -r "${{ inputs.dags_path }}/." aws-mwaa-local-runner/dags/
        shell: bash

      - name: Copy startup script
        if: ${{ inputs.startup_script_path != '' }}
        run: |
          cp "${{ inputs.startup_script_path }}" aws-mwaa-local-runner/startup_script/startup.sh
        shell: bash

      - name: Copy requirements.txt
        if: ${{ inputs.requirements_path != '' }}
        run: |
          cp "${{ inputs.requirements_path }}" aws-mwaa-local-runner/requirements/requirements.txt
        shell: bash

      - name: Copy plugins
        if: ${{ inputs.plugins_path != '' }}
        run: |
          cp -r "${{ inputs.plugins_path }}/." aws-mwaa-local-runner/plugins/
        shell: bash

      - name: Configure AWS credentials
        if: ${{ inputs.aws_role_to_assume != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role_to_assume }}
          aws-region: ${{ inputs.aws_region }}
          role-duration-seconds: ${{ inputs.aws_role_assume_duration_seconds }}

      - name: Update .env.localrunner with AWS credentials
        if: ${{ inputs.aws_role_to_assume != '' }}
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}" >> aws-mwaa-local-runner/docker/config/.env.localrunner
          echo "AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}" >> aws-mwaa-local-runner/docker/config/.env.localrunner
          echo "AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}" >> aws-mwaa-local-runner/docker/config/.env.localrunner
        shell: bash

      - name: Build MWAA Local Runner image
        run: |
          cd aws-mwaa-local-runner
          ./mwaa-local-env build-image
        shell: bash

      - name: Start MWAA Local Runner
        run: |
          cd aws-mwaa-local-runner
          ./mwaa-local-env start &
        shell: bash

      - name: Get container name
        run: |
          CONTAINER_NAME=$(docker ps -a --format '{{.Names}}' | grep _local-runner_)
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Wait for Airflow webserver to be ready
        run: |
          for i in {1..30}; do
            if docker logs $CONTAINER_NAME 2>&1 | grep -Fq 'Listening at: http://0.0.0.0:8080'; then
              echo "Airflow is ready"
              break
            else
              echo "Waiting for Airflow to be ready..."
              sleep 10
            fi
          done
        shell: bash

      - name: Migrate DB
        run: |
          docker exec $CONTAINER_NAME airflow db migrate
        shell: bash

      - name: List DAGs
        run: |
          docker exec $CONTAINER_NAME airflow dags list
        shell: bash

      - name: Test DAG
        if: ${{ inputs.dag_id != '' && inputs.execution_date != '' }}
        run: |
          docker exec $CONTAINER_NAME airflow dags test "${{ inputs.dag_id }}" "${{ inputs.execution_date }}"
        shell: bash
